#!/usr/bin/env python

# m=$1
# echo "`date`,$m" >>Dropbox/hill/m.csv

import argparse
import os
import sys
import csv
import numpy
import subprocess
from datetime import datetime, timedelta

import tutils

# mappend -1 --plot --start-date 2019-Jun-1
parser = argparse.ArgumentParser()
parser.add_argument('mlist', nargs='+', type=float)
parser.add_argument('--mfile', default='%s/Dropbox/hill/m.csv' % os.getenv('HOME'))
parser.add_argument('--plot', action='store_true')
parser.add_argument('--start-date', help='e.g. 2019-Jun-1 (note that the floating average can\'t see any values before this, i.e. the first few days will be only averaged over values on one side (the right)')
parser.add_argument('--plotfile', default=os.getenv('HOME') + '/tmp.png')
parser.add_argument('--half-window', type=float, default=3.5, help='half width of window for averaging weights')
parser.add_argument('--debug', action='store_true')
args = parser.parse_args()
tutils.process_args(args)

# dtime = datetime.strptime(datestr.strip(), '%a %b %d %H:%M:%S %Z %Y')  # for later plotting use

# max_delta = timedelta(days=7)

if not args.plot:
    meanval = numpy.mean(args.mlist)
    print 'mean of %d: %.1f' % (len(args.mlist), meanval)
    datestr = subprocess.check_output(['date']).strip()  # for backwards compatibility, since I used to write the file with `date` >>
    with open(args.mfile, 'a') as csvfile:
        csvfile.write('%s,%s,%.1f\n' % (datestr, ':'.join('%.1f'%m for m in args.mlist), meanval))
else:
    mfos = {'dates' : [], 'weights' : [], 'n_days' : []}
    with open(args.mfile) as csvfile:
        reader = csv.DictReader(csvfile)
        for line in reader:
            dt = datetime.strptime(line['date'].strip(), '%a %b %d %H:%M:%S %Z %Y')
            # epoch = dt.utcfromtimestamp(0)
            if args.start_date is None:
                args.start_date = dt
            elif args.start_date > dt:
                continue
            # if len(mfos['dates']) > 0 and mfos['dates'][-1] is not None and dt - mfos['dates'][-1] > max_delta:
            #     mfos['dates'].append(None)
            #     mfos['weights'].append(None)
            #     mfos['n_days'].append(None)
            mfos['dates'].append(dt)
            mfos['weights'].append(float(line['weight']))
            mfos['n_days'].append((dt - args.start_date).days)

    tutils.add_float_averages(mfos, 'weights', args.half_window, debug=args.debug)
    tutils.plot_mfos(args, mfos, 'weights')
