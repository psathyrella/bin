#!/usr/bin/env python

# m=$1
# echo "`date`,$m" >>Dropbox/hill/m.csv

import argparse
import os
import sys
import csv
import numpy
import subprocess
from datetime import datetime, timedelta
import time

import tutils

# mappend -1 --plot --start-date 2019-Jun-1
parser = argparse.ArgumentParser()
parser.add_argument('mlist', nargs='*', type=float)
parser.add_argument('--mfile', default='%s/Dropbox/hill/m.csv' % os.getenv('HOME'))
parser.add_argument('--plot', action='store_true')
parser.add_argument('--start-date', help='e.g. 2019-Jun-1 (note that the floating average can\'t see any values before this, i.e. the first few days will be only averaged over values on one side (the right)')
parser.add_argument('--plotfile', default=os.getenv('HOME') + '/tmp.png')
parser.add_argument('--half-window', type=float, default=3.5, help='half width of window for averaging weights (i.e. all weights closer than this many days to the day in question are included in the average for that day)')
parser.add_argument('--prefix', type=float, default=170, help='if all entries in <mlist> are integers less than 100, treat them as shorthands for floats less than 10 to add to this (if any are negative, they\'re shifted down to the next one). e.g. if mlist is "46 51" this goes to 174.6 175.1')
parser.add_argument('--debug', action='store_true')
args = parser.parse_args()
tutils.process_args(args)

# dtime = datetime.strptime(datestr.strip(), '%a %b %d %H:%M:%S %Z %Y')  # for later plotting use

# max_delta = timedelta(days=7)

# ----------------------------------------------------------------------------------------
def read_mfos():
    mfos = {'dates' : [], 'weights' : [], 'n_days' : []}
    with open(args.mfile) as csvfile:
        reader = csv.DictReader(csvfile)
        for line in reader:
            dt = datetime.strptime(line['date'].strip(), '%a %b %d %H:%M:%S %Y') #  %Z (was before %Y)
            # epoch = dt.utcfromtimestamp(0)
            if args.start_date is None:
                args.start_date = dt
            elif args.start_date > dt:
                continue
            # if len(mfos['dates']) > 0 and mfos['dates'][-1] is not None and dt - mfos['dates'][-1] > max_delta:
            #     mfos['dates'].append(None)
            #     mfos['weights'].append(None)
            #     mfos['n_days'].append(None)
            mfos['dates'].append(dt)
            mfos['weights'].append(float(line['weight']))
            mfos['n_days'].append((dt - args.start_date).total_seconds() / 86400.)

    return mfos

# ----------------------------------------------------------------------------------------
if not args.plot and len(args.mlist) > 0:
    if all(int(m)==m and m<100 for m in args.mlist):
        args.mlist = [args.prefix + float(m/10. if m>=0 else -10 - m/10) for m in args.mlist]
    meanval = numpy.mean(args.mlist)
    print 'mean of %d: %.1f' % (len(args.mlist), meanval)
    datestr = datetime.now().strftime('%a %b %d %H:%M:%S %Y') #  %Z (was before %Y)
    with open(args.mfile, 'a') as csvfile:
        csvfile.write('%s,%s,%.1f\n' % (datestr, ':'.join('%.1f'%m for m in args.mlist), meanval))

mfos = read_mfos()
tutils.add_float_averages(mfos, 'weights', args.half_window, debug=args.debug)
if not args.plot and len(args.mlist) > 0:
    print '  average over last %.1f days: %.1f' % (args.half_window.total_seconds() / 86400., mfos['float_avgs'][-1])

if args.plot:
    tutils.plot_mfos(args, mfos, 'weights')
